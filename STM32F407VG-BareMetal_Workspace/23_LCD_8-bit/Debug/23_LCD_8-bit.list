
23_LCD_8-bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000558  08000558  00001560  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00001560  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000560  00001560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00001558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001560  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004a3  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020c  00000000  00000000  00001a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00001c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016675  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c95  00000000  00000000  000183a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e3c2  00000000  00000000  00019038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000973fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000013c  00000000  00000000  00097440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0009757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000538 	.word	0x08000538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000538 	.word	0x08000538

080001c8 <GPIO_Init>:

#define  RS		(1U<<8)
#define RW		(1U<<9)
#define E		(1U<<10)

void GPIO_Init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//enable clock access to PortA
	RCC->AHB1ENR |= GPIOAEN;
 80001cc:	4b47      	ldr	r3, [pc, #284]	@ (80002ec <GPIO_Init+0x124>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a46      	ldr	r2, [pc, #280]	@ (80002ec <GPIO_Init+0x124>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

	//set output mode to PA0 to PA10 pins
	//PA0
	GPIOA->MODER |= (1U<<0);
 80001d8:	4b45      	ldr	r3, [pc, #276]	@ (80002f0 <GPIO_Init+0x128>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a44      	ldr	r2, [pc, #272]	@ (80002f0 <GPIO_Init+0x128>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<1);
 80001e4:	4b42      	ldr	r3, [pc, #264]	@ (80002f0 <GPIO_Init+0x128>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a41      	ldr	r2, [pc, #260]	@ (80002f0 <GPIO_Init+0x128>)
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	6013      	str	r3, [r2, #0]
	//PA1
	GPIOA->MODER |= (1U<<2);
 80001f0:	4b3f      	ldr	r3, [pc, #252]	@ (80002f0 <GPIO_Init+0x128>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a3e      	ldr	r2, [pc, #248]	@ (80002f0 <GPIO_Init+0x128>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<3);
 80001fc:	4b3c      	ldr	r3, [pc, #240]	@ (80002f0 <GPIO_Init+0x128>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a3b      	ldr	r2, [pc, #236]	@ (80002f0 <GPIO_Init+0x128>)
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	6013      	str	r3, [r2, #0]
	//PA2
	GPIOA->MODER |= (1U<<4);
 8000208:	4b39      	ldr	r3, [pc, #228]	@ (80002f0 <GPIO_Init+0x128>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a38      	ldr	r2, [pc, #224]	@ (80002f0 <GPIO_Init+0x128>)
 800020e:	f043 0310 	orr.w	r3, r3, #16
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<5);
 8000214:	4b36      	ldr	r3, [pc, #216]	@ (80002f0 <GPIO_Init+0x128>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a35      	ldr	r2, [pc, #212]	@ (80002f0 <GPIO_Init+0x128>)
 800021a:	f003 0320 	and.w	r3, r3, #32
 800021e:	6013      	str	r3, [r2, #0]
	//PA3
	GPIOA->MODER |= (1U<<6);
 8000220:	4b33      	ldr	r3, [pc, #204]	@ (80002f0 <GPIO_Init+0x128>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a32      	ldr	r2, [pc, #200]	@ (80002f0 <GPIO_Init+0x128>)
 8000226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<7);
 800022c:	4b30      	ldr	r3, [pc, #192]	@ (80002f0 <GPIO_Init+0x128>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a2f      	ldr	r2, [pc, #188]	@ (80002f0 <GPIO_Init+0x128>)
 8000232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000236:	6013      	str	r3, [r2, #0]
	//PA4
	GPIOA->MODER |= (1U<<8);
 8000238:	4b2d      	ldr	r3, [pc, #180]	@ (80002f0 <GPIO_Init+0x128>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2c      	ldr	r2, [pc, #176]	@ (80002f0 <GPIO_Init+0x128>)
 800023e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<9);
 8000244:	4b2a      	ldr	r3, [pc, #168]	@ (80002f0 <GPIO_Init+0x128>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a29      	ldr	r2, [pc, #164]	@ (80002f0 <GPIO_Init+0x128>)
 800024a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800024e:	6013      	str	r3, [r2, #0]
	//PA5
	GPIOA->MODER |= (1U<<10);
 8000250:	4b27      	ldr	r3, [pc, #156]	@ (80002f0 <GPIO_Init+0x128>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a26      	ldr	r2, [pc, #152]	@ (80002f0 <GPIO_Init+0x128>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<11);
 800025c:	4b24      	ldr	r3, [pc, #144]	@ (80002f0 <GPIO_Init+0x128>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a23      	ldr	r2, [pc, #140]	@ (80002f0 <GPIO_Init+0x128>)
 8000262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000266:	6013      	str	r3, [r2, #0]
	//PA6
	GPIOA->MODER |= (1U<<12);
 8000268:	4b21      	ldr	r3, [pc, #132]	@ (80002f0 <GPIO_Init+0x128>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a20      	ldr	r2, [pc, #128]	@ (80002f0 <GPIO_Init+0x128>)
 800026e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<13);
 8000274:	4b1e      	ldr	r3, [pc, #120]	@ (80002f0 <GPIO_Init+0x128>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1d      	ldr	r2, [pc, #116]	@ (80002f0 <GPIO_Init+0x128>)
 800027a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800027e:	6013      	str	r3, [r2, #0]
	//PA7
	GPIOA->MODER |= (1U<<14);
 8000280:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <GPIO_Init+0x128>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1a      	ldr	r2, [pc, #104]	@ (80002f0 <GPIO_Init+0x128>)
 8000286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<15);
 800028c:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <GPIO_Init+0x128>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a17      	ldr	r2, [pc, #92]	@ (80002f0 <GPIO_Init+0x128>)
 8000292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000296:	6013      	str	r3, [r2, #0]
	//PA8
	GPIOA->MODER |= (1U<<16);
 8000298:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <GPIO_Init+0x128>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <GPIO_Init+0x128>)
 800029e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<17);
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <GPIO_Init+0x128>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <GPIO_Init+0x128>)
 80002aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ae:	6013      	str	r3, [r2, #0]
	//PA9
	GPIOA->MODER |= (1U<<18);
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <GPIO_Init+0x128>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <GPIO_Init+0x128>)
 80002b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<19);
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <GPIO_Init+0x128>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0b      	ldr	r2, [pc, #44]	@ (80002f0 <GPIO_Init+0x128>)
 80002c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002c6:	6013      	str	r3, [r2, #0]
	//PA10
	GPIOA->MODER |= (1U<<20);
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <GPIO_Init+0x128>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a08      	ldr	r2, [pc, #32]	@ (80002f0 <GPIO_Init+0x128>)
 80002ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1U<<21);
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <GPIO_Init+0x128>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <GPIO_Init+0x128>)
 80002da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002de:	6013      	str	r3, [r2, #0]

}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020000 	.word	0x40020000

080002f4 <LCD_command>:
void LCD_command(unsigned char command){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = (command & 0xFF);
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <LCD_command+0x50>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~RS;	//RS =0
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <LCD_command+0x50>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <LCD_command+0x50>)
 800030a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800030e:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~RW;	//RW =0
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <LCD_command+0x50>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <LCD_command+0x50>)
 8000316:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800031a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= E;	//E = 1
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <LCD_command+0x50>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <LCD_command+0x50>)
 8000322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000326:	6153      	str	r3, [r2, #20]
	delayMs(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f870 	bl	800040e <delayMs>
	GPIOA->ODR &= ~E;	//E = 0
 800032e:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <LCD_command+0x50>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <LCD_command+0x50>)
 8000334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000338:	6153      	str	r3, [r2, #20]

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <LCD_data>:
void LCD_data(char data){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = (data & 0xFF);
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <LCD_data+0x50>)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= RS;	//RS =1
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <LCD_data+0x50>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <LCD_data+0x50>)
 800035e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000362:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~RW;	//RW =0
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <LCD_data+0x50>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <LCD_data+0x50>)
 800036a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800036e:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= E;	//E = 1
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <LCD_data+0x50>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <LCD_data+0x50>)
 8000376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800037a:	6153      	str	r3, [r2, #20]
	delayMs(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 f846 	bl	800040e <delayMs>
	GPIOA->ODR &= ~E;	//E = 0
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <LCD_data+0x50>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <LCD_data+0x50>)
 8000388:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800038c:	6153      	str	r3, [r2, #20]
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40020000 	.word	0x40020000

0800039c <LCD_Init>:

void LCD_Init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    GPIO_Init();
 80003a0:	f7ff ff12 	bl	80001c8 <GPIO_Init>

    delayMs(30);
 80003a4:	201e      	movs	r0, #30
 80003a6:	f000 f832 	bl	800040e <delayMs>
    LCD_command(0x30);
 80003aa:	2030      	movs	r0, #48	@ 0x30
 80003ac:	f7ff ffa2 	bl	80002f4 <LCD_command>
    delayMs(10);
 80003b0:	200a      	movs	r0, #10
 80003b2:	f000 f82c 	bl	800040e <delayMs>
    LCD_command(0x30);
 80003b6:	2030      	movs	r0, #48	@ 0x30
 80003b8:	f7ff ff9c 	bl	80002f4 <LCD_command>
    delayMs(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 f826 	bl	800040e <delayMs>
    LCD_command(0x30);
 80003c2:	2030      	movs	r0, #48	@ 0x30
 80003c4:	f7ff ff96 	bl	80002f4 <LCD_command>

    LCD_command(0x38);      //set 8-bit data, 2-line, 5x7 font
 80003c8:	2038      	movs	r0, #56	@ 0x38
 80003ca:	f7ff ff93 	bl	80002f4 <LCD_command>
    LCD_command(0x06);      //move cursor right after each char
 80003ce:	2006      	movs	r0, #6
 80003d0:	f7ff ff90 	bl	80002f4 <LCD_command>
    LCD_command(0x01);      //clear screen, move cursor to home
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ff8d 	bl	80002f4 <LCD_command>
    LCD_command(0x0F);      //turn on display, cursor blinking
 80003da:	200f      	movs	r0, #15
 80003dc:	f7ff ff8a 	bl	80002f4 <LCD_command>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LCD_string>:

void LCD_string(unsigned char *s){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	while(*s!=0){
 80003ec:	e006      	b.n	80003fc <LCD_string+0x18>
		LCD_data(*s++);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ffa6 	bl	8000348 <LCD_data>
	while(*s!=0){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f4      	bne.n	80003ee <LCD_string+0xa>
	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <delayMs>:
/* delay n milliseconds (16 MHz CPU clock) */
void delayMs(int delay) {
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
    int i;
    for (; delay > 0; delay--){
 8000416:	e00d      	b.n	8000434 <delayMs+0x26>
        for (i = 0; i < 3195; i++)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e002      	b.n	8000424 <delayMs+0x16>
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3301      	adds	r3, #1
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f640 427a 	movw	r2, #3194	@ 0xc7a
 800042a:	4293      	cmp	r3, r2
 800042c:	ddf7      	ble.n	800041e <delayMs+0x10>
    for (; delay > 0; delay--){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3b01      	subs	r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	dcee      	bgt.n	8000418 <delayMs+0xa>
				{}
			}
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <main>:
#include "lcd.h"

int main(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	LCD_Init();
 800044e:	f7ff ffa5 	bl	800039c <LCD_Init>

	unsigned char buffer[8] = "Hello";
 8000452:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <main+0x50>)
 8000454:	463b      	mov	r3, r7
 8000456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045a:	6018      	str	r0, [r3, #0]
 800045c:	3304      	adds	r3, #4
 800045e:	8019      	strh	r1, [r3, #0]
 8000460:	2300      	movs	r3, #0
 8000462:	80fb      	strh	r3, [r7, #6]
	while(1){
		LCD_command(0x80);
 8000464:	2080      	movs	r0, #128	@ 0x80
 8000466:	f7ff ff45 	bl	80002f4 <LCD_command>
		LCD_data('H');
 800046a:	2048      	movs	r0, #72	@ 0x48
 800046c:	f7ff ff6c 	bl	8000348 <LCD_data>

		LCD_command(0xC0);
 8000470:	20c0      	movs	r0, #192	@ 0xc0
 8000472:	f7ff ff3f 	bl	80002f4 <LCD_command>
		LCD_string(buffer);
 8000476:	463b      	mov	r3, r7
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffb3 	bl	80003e4 <LCD_string>

		delayMs(1000);
 800047e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000482:	f7ff ffc4 	bl	800040e <delayMs>
		LCD_command(0x01);
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff34 	bl	80002f4 <LCD_command>

		delayMs(500);
 800048c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000490:	f7ff ffbd 	bl	800040e <delayMs>
		LCD_command(0x80);
 8000494:	bf00      	nop
 8000496:	e7e5      	b.n	8000464 <main+0x1c>
 8000498:	08000550 	.word	0x08000550

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	@ (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	@ (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	@ (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 f811 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff ffbb 	bl	8000448 <main>

080004d2 <LoopForever>:

LoopForever:
  b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e0:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e8:	2000001c 	.word	0x2000001c

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000528 <__libc_init_array+0x38>)
 80004f4:	4c0d      	ldr	r4, [pc, #52]	@ (800052c <__libc_init_array+0x3c>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	2600      	movs	r6, #0
 80004fc:	42a6      	cmp	r6, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	4d0b      	ldr	r5, [pc, #44]	@ (8000530 <__libc_init_array+0x40>)
 8000502:	4c0c      	ldr	r4, [pc, #48]	@ (8000534 <__libc_init_array+0x44>)
 8000504:	f000 f818 	bl	8000538 <_init>
 8000508:	1b64      	subs	r4, r4, r5
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	2600      	movs	r6, #0
 800050e:	42a6      	cmp	r6, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f855 3b04 	ldr.w	r3, [r5], #4
 8000518:	4798      	blx	r3
 800051a:	3601      	adds	r6, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000522:	4798      	blx	r3
 8000524:	3601      	adds	r6, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000558 	.word	0x08000558
 800052c:	08000558 	.word	0x08000558
 8000530:	08000558 	.word	0x08000558
 8000534:	0800055c 	.word	0x0800055c

08000538 <_init>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr

08000544 <_fini>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr
