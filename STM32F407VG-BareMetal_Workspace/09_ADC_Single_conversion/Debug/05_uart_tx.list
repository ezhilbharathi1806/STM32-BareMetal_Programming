
05_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003b8  080003b8  000013b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000013c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000013c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000013c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000013c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013c8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000041f  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000017b  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00001998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165ab  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000068d  00000000  00000000  00017ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e432  00000000  00000000  0001867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00096aaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  00096af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00096bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003a0 	.word	0x080003a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003a0 	.word	0x080003a0

080001c8 <main>:
void UART2_tx_init(void);
void uart2_write(uint8_t ch);
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRate);
void USART2_SendString(const char *str);

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	UART2_tx_init();
 80001cc:	f000 f80a 	bl	80001e4 <UART2_tx_init>
	USART2_SendString("Hello\n");
 80001d0:	4803      	ldr	r0, [pc, #12]	@ (80001e0 <main+0x18>)
 80001d2:	f000 f86d 	bl	80002b0 <USART2_SendString>

	while(1){
		uart2_write('Y');
 80001d6:	2059      	movs	r0, #89	@ 0x59
 80001d8:	f000 f852 	bl	8000280 <uart2_write>
 80001dc:	e7fb      	b.n	80001d6 <main+0xe>
 80001de:	bf00      	nop
 80001e0:	080003b8 	.word	0x080003b8

080001e4 <UART2_tx_init>:
	}
}

void UART2_tx_init(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/*********************** Configure GPIO pin ***********************/
	//enable clock access to GPIO
	RCC->AHB1ENR |=GPIOAEN;
 80001e8:	4b21      	ldr	r3, [pc, #132]	@ (8000270 <UART2_tx_init+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ec:	4a20      	ldr	r2, [pc, #128]	@ (8000270 <UART2_tx_init+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PA2 node to alternate function mode
	GPIOA->MODER &=~(1U<<4);
 80001f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000274 <UART2_tx_init+0x90>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000274 <UART2_tx_init+0x90>)
 80001fa:	f023 0310 	bic.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(1U<<5);
 8000200:	4b1c      	ldr	r3, [pc, #112]	@ (8000274 <UART2_tx_init+0x90>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1b      	ldr	r2, [pc, #108]	@ (8000274 <UART2_tx_init+0x90>)
 8000206:	f043 0320 	orr.w	r3, r3, #32
 800020a:	6013      	str	r3, [r2, #0]

	//set PA2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |=(1U<<8);
 800020c:	4b19      	ldr	r3, [pc, #100]	@ (8000274 <UART2_tx_init+0x90>)
 800020e:	6a1b      	ldr	r3, [r3, #32]
 8000210:	4a18      	ldr	r2, [pc, #96]	@ (8000274 <UART2_tx_init+0x90>)
 8000212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000216:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000218:	4b16      	ldr	r3, [pc, #88]	@ (8000274 <UART2_tx_init+0x90>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a15      	ldr	r2, [pc, #84]	@ (8000274 <UART2_tx_init+0x90>)
 800021e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000224:	4b13      	ldr	r3, [pc, #76]	@ (8000274 <UART2_tx_init+0x90>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a12      	ldr	r2, [pc, #72]	@ (8000274 <UART2_tx_init+0x90>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000230:	4b10      	ldr	r3, [pc, #64]	@ (8000274 <UART2_tx_init+0x90>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a0f      	ldr	r2, [pc, #60]	@ (8000274 <UART2_tx_init+0x90>)
 8000236:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800023a:	6213      	str	r3, [r2, #32]

	/***********************configureuart module***********************/
	//Enable clock access to UART2
	RCC->APB1ENR |=UART2EN;
 800023c:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <UART2_tx_init+0x8c>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000240:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <UART2_tx_init+0x8c>)
 8000242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000246:	6413      	str	r3, [r2, #64]	@ 0x40

	//Configure BaudRate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800024c:	490a      	ldr	r1, [pc, #40]	@ (8000278 <UART2_tx_init+0x94>)
 800024e:	480b      	ldr	r0, [pc, #44]	@ (800027c <UART2_tx_init+0x98>)
 8000250:	f000 f843 	bl	80002da <uart_set_baudrate>

	//configure the transfer direction
	USART2->CR1 |= CR1_TE;
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <UART2_tx_init+0x98>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <UART2_tx_init+0x98>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	60d3      	str	r3, [r2, #12]

	//Enable the UART Module
	USART2->CR1 |= CR1_UE;
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <UART2_tx_init+0x98>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <UART2_tx_init+0x98>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026a:	60d3      	str	r3, [r2, #12]

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40023800 	.word	0x40023800
 8000274:	40020000 	.word	0x40020000
 8000278:	00f42400 	.word	0x00f42400
 800027c:	40004400 	.word	0x40004400

08000280 <uart2_write>:

void uart2_write(uint8_t ch){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	//make sure the Transmit data register is empty
	while(!(USART2->SR & SR_TXE));
 800028a:	bf00      	nop
 800028c:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <uart2_write+0x2c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <uart2_write+0xc>

	//write to transmit data register
	USART2->DR = ch;//(ch & 0xFF);
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <uart2_write+0x2c>)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	6053      	str	r3, [r2, #4]

}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40004400 	.word	0x40004400

080002b0 <USART2_SendString>:

void USART2_SendString(const char *str) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002b8:	e006      	b.n	80002c8 <USART2_SendString+0x18>
        uart2_write(*str++);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	607a      	str	r2, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffdc 	bl	8000280 <uart2_write>
    while (*str) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f4      	bne.n	80002ba <USART2_SendString+0xa>
    }
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRate){
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
	USARTx->BRR = (PeriphClk+(BaudRate/2U))/BaudRate;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	085a      	lsrs	r2, r3, #1
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	441a      	add	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	609a      	str	r2, [r3, #8]
	//USART2->BRR = 0x1A1; // Set baud rate to 9600 (assuming 16 MHz clock)
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ff47 	bl	80001c8 <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	@ (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	@ (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	@ (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	@ (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003c0 	.word	0x080003c0
 8000394:	080003c0 	.word	0x080003c0
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c4 	.word	0x080003c4

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
