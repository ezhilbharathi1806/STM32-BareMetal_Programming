
13_Output_Compare_TIM4_PD12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000190  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00001320  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001320  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000045e  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000140  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  000018f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000046  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017de1  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000066a  00000000  00000000  00019787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087daf  00000000  00000000  00019df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a1ba0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a8  00000000  00000000  000a1be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  000a1c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000300 	.word	0x08000300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000300 	.word	0x08000300

080001c8 <main>:
//PD12    |  TIM4_CH1

#include "tim.h"


int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	tim4_PD12_output_compare();
 80001cc:	f000 f802 	bl	80001d4 <tim4_PD12_output_compare>

	while(1){
 80001d0:	bf00      	nop
 80001d2:	e7fd      	b.n	80001d0 <main+0x8>

080001d4 <tim4_PD12_output_compare>:

	//Enable timer
	TIM2->CR1 |= CR1_CEN;
}

void tim4_PD12_output_compare(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	//GPIOD Configuration
	//Enable clock access to GPIOD
	RCC->AHB1ENR |=GPIODEN;
 80001d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <tim4_PD12_output_compare+0x84>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000258 <tim4_PD12_output_compare+0x84>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PD12 mode to alternate function mode
	GPIOD->MODER &= ~(1<<24);
 80001e4:	4b1d      	ldr	r3, [pc, #116]	@ (800025c <tim4_PD12_output_compare+0x88>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1c      	ldr	r2, [pc, #112]	@ (800025c <tim4_PD12_output_compare+0x88>)
 80001ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<25);
 80001f0:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <tim4_PD12_output_compare+0x88>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a19      	ldr	r2, [pc, #100]	@ (800025c <tim4_PD12_output_compare+0x88>)
 80001f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001fa:	6013      	str	r3, [r2, #0]

	//Set PD12 alternate function type to TIM4_CH1 (AF2)
	GPIOD->AFR[1] |= (1U<<17);
 80001fc:	4b17      	ldr	r3, [pc, #92]	@ (800025c <tim4_PD12_output_compare+0x88>)
 80001fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000200:	4a16      	ldr	r2, [pc, #88]	@ (800025c <tim4_PD12_output_compare+0x88>)
 8000202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000206:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure TIM4
	//enable clock access to TIM4
	RCC->APB1ENR |= TIM4EN;
 8000208:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <tim4_PD12_output_compare+0x84>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800020c:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <tim4_PD12_output_compare+0x84>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set prescaler value*/
	TIM4->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000216:	f240 623f 	movw	r2, #1599	@ 0x63f
 800021a:	629a      	str	r2, [r3, #40]	@ 0x28
	/*Set auto-reload value*/
	TIM4->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 800021e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000222:	62da      	str	r2, [r3, #44]	@ 0x2c

	//set output compare toggle mode
	TIM4->CCMR1 |= OC1M_TOGGLE;
 8000224:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 800022a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800022e:	6193      	str	r3, [r2, #24]

	//enable TIM4_CH1 in compare mode
	TIM4->CCER |= CCER_CC1E;
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6213      	str	r3, [r2, #32]

	//Clear counter
	TIM4->CNT = 0;
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 800023e:	2200      	movs	r2, #0
 8000240:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable Timer 4
	TIM4->CR1 |= CR1_CEN;
 8000242:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <tim4_PD12_output_compare+0x8c>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	40023800 	.word	0x40023800
 800025c:	40020c00 	.word	0x40020c00
 8000260:	40000800 	.word	0x40000800

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	@ (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	@ (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff97 	bl	80001c8 <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	@ (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	@ (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	@ (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	@ (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
