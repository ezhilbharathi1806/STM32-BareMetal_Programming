
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013b4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009cc  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002b3  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00002068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000063  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016699  00000000  00000000  00002163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c2c  00000000  00000000  000187fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ea12  00000000  00000000  00019428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00097e3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000148  00000000  00000000  00097e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  00097fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000394 	.word	0x08000394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000394 	.word	0x08000394

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <pa1_adc_interrupt_init>:
#define CR2_SWSTART		(1U<<30)
#define CR2_CONT		(1U<<1)
#define CR1_EOCIE		(1U<<5)

void pa1_adc_interrupt_init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin ***/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <pa1_adc_interrupt_init+0x64>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a16      	ldr	r2, [pc, #88]	@ (8000268 <pa1_adc_interrupt_init+0x64>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |=(1U<<2);
 8000214:	4b15      	ldr	r3, [pc, #84]	@ (800026c <pa1_adc_interrupt_init+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a14      	ldr	r2, [pc, #80]	@ (800026c <pa1_adc_interrupt_init+0x68>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 8000220:	4b12      	ldr	r3, [pc, #72]	@ (800026c <pa1_adc_interrupt_init+0x68>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <pa1_adc_interrupt_init+0x68>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6013      	str	r3, [r2, #0]
	/***Configure the ADC module***/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 800022c:	4b0e      	ldr	r3, [pc, #56]	@ (8000268 <pa1_adc_interrupt_init+0x64>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000230:	4a0d      	ldr	r2, [pc, #52]	@ (8000268 <pa1_adc_interrupt_init+0x64>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000236:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Enable ADC end-of-conversion interrupt*/
	ADC1->CR1 |= CR1_EOCIE;
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a0c      	ldr	r2, [pc, #48]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6053      	str	r3, [r2, #4]

	/*Enable ADC interrupt in NVIC*/
	NVIC_EnableIRQ(ADC_IRQn);
 8000244:	2012      	movs	r0, #18
 8000246:	f7ff ffbf 	bl	80001c8 <__NVIC_EnableIRQ>


	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800024a:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 800024c:	2201      	movs	r2, #1
 800024e:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000250:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 8000252:	2200      	movs	r2, #0
 8000254:	62da      	str	r2, [r3, #44]	@ 0x2c



	/*Enable ADC module*/
	ADC1->CR2 |= CR2_AD0N;
 8000256:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <pa1_adc_interrupt_init+0x6c>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6093      	str	r3, [r2, #8]
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000
 8000270:	40012000 	.word	0x40012000

08000274 <start_converstion>:
	/*Enable ADC module*/
	ADC1->CR2 |= CR2_AD0N;
}

void start_converstion(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |= CR2_CONT;
 8000278:	4b08      	ldr	r3, [pc, #32]	@ (800029c <start_converstion+0x28>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a07      	ldr	r2, [pc, #28]	@ (800029c <start_converstion+0x28>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6093      	str	r3, [r2, #8]
	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <start_converstion+0x28>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <start_converstion+0x28>)
 800028a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800028e:	6093      	str	r3, [r2, #8]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40012000 	.word	0x40012000

080002a0 <main>:
#include "adc.h"

uint32_t sensor_value;

int main(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

	pa1_adc_interrupt_init();
 80002a4:	f7ff ffae 	bl	8000204 <pa1_adc_interrupt_init>
	start_converstion();
 80002a8:	f7ff ffe4 	bl	8000274 <start_converstion>
	while(1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <main+0xc>

080002b0 <adc_callback>:
	{
	}
}

static void adc_callback(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <adc_callback+0x18>)
 80002b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <adc_callback+0x1c>)
 80002ba:	6013      	str	r3, [r2, #0]
	//printf("Sensor value : %d \n\r",(int)sensor_value);

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40012000 	.word	0x40012000
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	/*Check for eoc in SR*/
	if((ADC1->SR & SR_EOC) !=0)
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <ADC_IRQHandler+0x24>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 0302 	and.w	r3, r3, #2
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d007      	beq.n	80002f0 <ADC_IRQHandler+0x20>
	{
		/*Clear EOC*/
		ADC1->SR &=~SR_EOC;
 80002e0:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <ADC_IRQHandler+0x24>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a03      	ldr	r2, [pc, #12]	@ (80002f4 <ADC_IRQHandler+0x24>)
 80002e6:	f023 0302 	bic.w	r3, r3, #2
 80002ea:	6013      	str	r3, [r2, #0]

		//Do something
		adc_callback();
 80002ec:	f7ff ffe0 	bl	80002b0 <adc_callback>
	}
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40012000 	.word	0x40012000

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffb9 	bl	80002a0 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	20000020 	.word	0x20000020

08000348 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <BusFault_Handler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	@ (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	@ (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	@ (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	@ (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
