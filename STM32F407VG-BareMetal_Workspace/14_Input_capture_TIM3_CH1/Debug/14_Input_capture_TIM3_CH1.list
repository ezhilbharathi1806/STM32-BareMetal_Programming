
14_Input_capture_TIM3_CH1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013b4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005f0  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001bc  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00001b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c555  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bc0  00000000  00000000  0002e1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088543  00000000  00000000  0002ed69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b72ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  000b72f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  000b73b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000394 	.word	0x08000394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000394 	.word	0x08000394

080001c8 <main>:
#include "stm32f4xx.h"
#include "tim.h"

int timestamp = 0 ;

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	tim4_PD12_output_compare();
 80001cc:	f000 f814 	bl	80001f8 <tim4_PD12_output_compare>
	tim3_PA6_input_capture();
 80001d0:	f000 f85a 	bl	8000288 <tim3_PA6_input_capture>

	while(1){
		/*Wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF)){}
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	@ (80001f0 <main+0x28>)
 80001d8:	691b      	ldr	r3, [r3, #16]
 80001da:	f003 0302 	and.w	r3, r3, #2
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0f9      	beq.n	80001d6 <main+0xe>

		/*Read captured value*/
		timestamp =  TIM3->CCR1;
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <main+0x28>)
 80001e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b02      	ldr	r3, [pc, #8]	@ (80001f4 <main+0x2c>)
 80001ea:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 80001ec:	e7f2      	b.n	80001d4 <main+0xc>
 80001ee:	bf00      	nop
 80001f0:	40000400 	.word	0x40000400
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <tim4_PD12_output_compare>:

	//Enable timer
	TIM2->CR1 |= CR1_CEN;
}

void tim4_PD12_output_compare(void){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	//GPIOD Configuration
	//Enable clock access to GPIOD
	RCC->AHB1ENR |=GPIODEN;
 80001fc:	4b1f      	ldr	r3, [pc, #124]	@ (800027c <tim4_PD12_output_compare+0x84>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000200:	4a1e      	ldr	r2, [pc, #120]	@ (800027c <tim4_PD12_output_compare+0x84>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PD12 mode to alternate function mode
	GPIOD->MODER &= ~(1<<24);
 8000208:	4b1d      	ldr	r3, [pc, #116]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1c      	ldr	r2, [pc, #112]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 800020e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<25);
 8000214:	4b1a      	ldr	r3, [pc, #104]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a19      	ldr	r2, [pc, #100]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800021e:	6013      	str	r3, [r2, #0]

	//Set PD12 alternate function type to TIM4_CH1 (AF2)
	GPIOD->AFR[1] |= (1U<<17);
 8000220:	4b17      	ldr	r3, [pc, #92]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 8000222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000224:	4a16      	ldr	r2, [pc, #88]	@ (8000280 <tim4_PD12_output_compare+0x88>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800022a:	6253      	str	r3, [r2, #36]	@ 0x24

	//configure TIM4
	//enable clock access to TIM4
	RCC->APB1ENR |= TIM4EN;
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <tim4_PD12_output_compare+0x84>)
 800022e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000230:	4a12      	ldr	r2, [pc, #72]	@ (800027c <tim4_PD12_output_compare+0x84>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set prescaler value*/
	TIM4->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000238:	4b12      	ldr	r3, [pc, #72]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 800023a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800023e:	629a      	str	r2, [r3, #40]	@ 0x28
	/*Set auto-reload value*/
	TIM4->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 8000240:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 8000242:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000246:	62da      	str	r2, [r3, #44]	@ 0x2c

	//set output compare toggle mode
	TIM4->CCMR1 |= OC1M_TOGGLE;
 8000248:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 800024e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000252:	6193      	str	r3, [r2, #24]

	//enable TIM4_CH1 in compare mode
	TIM4->CCER |= CCER_CC1E;
 8000254:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6213      	str	r3, [r2, #32]

	//Clear counter
	TIM4->CNT = 0;
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable Timer 4
	TIM4->CR1 |= CR1_CEN;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <tim4_PD12_output_compare+0x8c>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6013      	str	r3, [r2, #0]
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40023800 	.word	0x40023800
 8000280:	40020c00 	.word	0x40020c00
 8000284:	40000800 	.word	0x40000800

08000288 <tim3_PA6_input_capture>:


void tim3_PA6_input_capture(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

	 /*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 800028c:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <tim3_PA6_input_capture+0x64>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a16      	ldr	r2, [pc, #88]	@ (80002ec <tim3_PA6_input_capture+0x64>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA6 mode to alternate function*/
	GPIOA->MODER &=~(1U<<12);
 8000298:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 800029e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 80002aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ae:	6013      	str	r3, [r2, #0]

	/*Set PA6 alternate function type to TIM3_CH1 (AF02)*/
	GPIOA->AFR[0]|=(1U<<25);
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <tim3_PA6_input_capture+0x68>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002ba:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim3*/
	RCC->APB1ENR |=TIM3EN;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <tim3_PA6_input_capture+0x64>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c0:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <tim3_PA6_input_capture+0x64>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set Prescaler*/
	TIM3->PSC = 1600 -1; // 16 000 000 /16 000
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <tim3_PA6_input_capture+0x6c>)
 80002ca:	f240 623f 	movw	r2, #1599	@ 0x63f
 80002ce:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Set CH1 to input capture*/
	TIM3->CCMR1  = CCMR1_CC1S;
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <tim3_PA6_input_capture+0x6c>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	619a      	str	r2, [r3, #24]

	/*Set CH1 to capture at rising edge*/
	TIM3->CCER  = CCER_CC1E;
 80002d6:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <tim3_PA6_input_capture+0x6c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	621a      	str	r2, [r3, #32]

	/*Enable TIM3*/
	TIM3->CR1 = CR1_CEN;
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <tim3_PA6_input_capture+0x6c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]


}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40000400 	.word	0x40000400

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff4d 	bl	80001c8 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	20000020 	.word	0x20000020

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	@ (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	@ (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	@ (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	@ (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
