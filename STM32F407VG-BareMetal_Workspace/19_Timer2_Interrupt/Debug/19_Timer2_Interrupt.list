
19_Timer2_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b73  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000270  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000021e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c549  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bd0  00000000  00000000  0002e811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a3f  00000000  00000000  0002f3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b7e20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000108  00000000  00000000  000b7e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  000b7f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003b0 	.word	0x080003b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003b0 	.word	0x080003b0

080001c8 <main>:
#define LED_PIN_PD14  (1U<<14)
#define LED_PIN_PD15  (1U<<15)

static void tim2_callback(void);

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	//enable clock access to GPIOA
	RCC->AHB1ENR |= GPIODEN;
 80001cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000240 <main+0x78>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000240 <main+0x78>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PD12 as output pin
	GPIOD->MODER |=(1<<24);
 80001d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <main+0x7c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a19      	ldr	r2, [pc, #100]	@ (8000244 <main+0x7c>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<25);
 80001e4:	4b17      	ldr	r3, [pc, #92]	@ (8000244 <main+0x7c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a16      	ldr	r2, [pc, #88]	@ (8000244 <main+0x7c>)
 80001ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80001ee:	6013      	str	r3, [r2, #0]

	//set PD13 as output pin
	GPIOD->MODER |=(1<<26);
 80001f0:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <main+0x7c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a13      	ldr	r2, [pc, #76]	@ (8000244 <main+0x7c>)
 80001f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<27);
 80001fc:	4b11      	ldr	r3, [pc, #68]	@ (8000244 <main+0x7c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a10      	ldr	r2, [pc, #64]	@ (8000244 <main+0x7c>)
 8000202:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000206:	6013      	str	r3, [r2, #0]

	//set PD14 as output pin
	GPIOD->MODER |=(1<<28);
 8000208:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <main+0x7c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0d      	ldr	r2, [pc, #52]	@ (8000244 <main+0x7c>)
 800020e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<29);
 8000214:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <main+0x7c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0a      	ldr	r2, [pc, #40]	@ (8000244 <main+0x7c>)
 800021a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800021e:	6013      	str	r3, [r2, #0]

	//set PD12 as output pin
	GPIOD->MODER |=(1<<30);
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <main+0x7c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a07      	ldr	r2, [pc, #28]	@ (8000244 <main+0x7c>)
 8000226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<31);
 800022c:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <main+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a04      	ldr	r2, [pc, #16]	@ (8000244 <main+0x7c>)
 8000232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000236:	6013      	str	r3, [r2, #0]

	tim2_1hz_interrupt_init();
 8000238:	f000 f842 	bl	80002c0 <tim2_1hz_interrupt_init>

	while(1){
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <main+0x74>
 8000240:	40023800 	.word	0x40023800
 8000244:	40020c00 	.word	0x40020c00

08000248 <tim2_callback>:
	}
}

static void tim2_callback(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	//printf("A second passed !! \n\r");
	//Toggle user leds on PD12, PD13, PD14, PD15
	GPIOD->ODR ^=(LED_PIN_PD12|LED_PIN_PD13|LED_PIN_PD14|LED_PIN_PD15);
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <tim2_callback+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <tim2_callback+0x1c>)
 8000252:	f483 4370 	eor.w	r3, r3, #61440	@ 0xf000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

	/*Clear update interrupt flag*/
	TIM2->SR &=~SR_UIF;
 800026c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000276:	f023 0301 	bic.w	r3, r3, #1
 800027a:	6113      	str	r3, [r2, #16]

	//Do something..
	tim2_callback();
 800027c:	f7ff ffe4 	bl	8000248 <tim2_callback>

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4907      	ldr	r1, [pc, #28]	@ (80002bc <__NVIC_EnableIRQ+0x38>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <tim2_1hz_interrupt_init>:
	//Enable timer
	TIM2->CR1 |= CR1_CEN;
}

void tim2_1hz_interrupt_init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM2EN;
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <tim2_1hz_interrupt_init+0x50>)
 80002c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <tim2_1hz_interrupt_init+0x50>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set prescaler value*/
	TIM2->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d4:	f240 623f 	movw	r2, #1599	@ 0x63f
 80002d8:	629a      	str	r2, [r3, #40]	@ 0x28
	/*Set auto-reload value*/
	TIM2->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	/*Clear counter*/
	TIM2->CNT = 0;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e8:	2200      	movs	r2, #0
 80002ea:	625a      	str	r2, [r3, #36]	@ 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]

	/*Enable TIM interrupt*/
	TIM2->DIER |=DIER_UIE;
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	60d3      	str	r3, [r2, #12]

	/*Enable TIM interrupt in NVIC*/
	 NVIC_EnableIRQ(TIM2_IRQn);
 8000304:	201c      	movs	r0, #28
 8000306:	f7ff ffbd 	bl	8000284 <__NVIC_EnableIRQ>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	@ (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff3f 	bl	80001c8 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	@ (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	@ (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	@ (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	@ (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
